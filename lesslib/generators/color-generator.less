// Define an array of colors with names and hex values
@colors: pink #ff69b4, blue #3498db, green #2ecc71, orange #e67e22;

// Color Generator Mixin by Name and Shade
.generate-color(@base-color, @name, @steps: 10) {
  .loop(@i) when (@i > 0) {
    @shade: @i * (100 / @steps);
    @color: lighten(@base-color, @shade);
    .@{name}-@{shade} { color: @color; }
    .loop(@i - 1);
  }
  .loop(@steps);

  .loop-d(@i) when (@i > 0) {
    @shade: @i * (100 / @steps);
    @color: darken(@base-color, @shade);
    .@{name}-@{shade} { color: @color; }
    .loop-d(@i - 1);
  }
  .loop-d(@steps);
}

// Iterate over the array of colors and generate variations
.generate-colors(@colors) {
  .loop-colors(@i) when (@i > 0) {
    @color-info: extract(@colors, @i);
    @name: extract(@color-info, 1);
    @hex: extract(@color-info, 2);
    .generate-color(@hex, @name, 10);
    .loop-colors(@i - 1);
  }
  .loop-colors(length(@colors));
}

// Example Usage
.colors {
  .generate-colors(@colors);
}

/*

Explanation:
Define an Array of Colors:

@colors: pink #ff69b4, blue #3498db, green #2ecc71, orange #e67e22;: This defines an array with color names and their corresponding hex values.
Color Generator Mixin:

.generate-color(@base-color, @name, @steps: 10): This mixin generates color variations for a given base color and name.
Loop through the Array:

.generate-colors(@colors): This mixin iterates over the array of colors and calls the .generate-color mixin for each color.
.loop-colors(@i): This inner loop extracts the color name and hex value from the array and generates the color variations.
Example Usage:

The .colors class uses the .generate-colors mixin to generate color classes for all the colors in the array.

*/
